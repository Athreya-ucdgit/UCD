crime_data
library(tidyverse)
library(dplyr)
library(dplyr)
crime_data = read_csv("Crimes.csv")
crime_data
model = lm(VR ~ MR, data = crime_data)
model
summary(model)
model = lm(VR ~ M, data=crime_data)
summary(model)
model = lm(VR ~ c(MR,M), data = crime_data)
model = lm(VR ~ MR + M, data = crime_data)
model = lm(VR ~ MR + M + P, data = crime_data)
model1 = lm(VR ~ MR, data = crime_data)
model2 = lm(VR ~ M, data = crime_data)
model3 = lm(VR ~ P, data = crime_data)
model4 = lm(VR ~ MR + M, data = crime_data)
model5 = lm(VR ~ MR + P, data = crime_data)
model6 = lm(VR ~ M + P, data = crime_data)
model7 = lm(VR ~ M + P + MR, data = crime_data)
model8 = lm(VR ~ 1, data = crime_data)
summary(model1)
library(tidyverse)
library(dplyr)
install.packages("olsrr")
library(olsrr)
library(olsrr)
model = lm(VR ~ , data = crime_data)
model = lm(VR ~ ., data = crime_data)
model
tab = ols_step_all_possible(model)
tab
tab
plot(tab)
tab
tab$aic
tab$aic
tab = ols_step_all_possible(model)
tab$aic
tab$result$aic
tab$result
tab$result[,c("predictor")]
tab$result[,c("predictors")]
tab$result[,c("predictors","aic")]
tab$result[,c("predictors","aic","sbic")]
tab$result[,c("predictors","aic","sbic"),"r2"]
tab$result
tab$result[,c("predictors","aic","sbic","rsquare")]
tab = ols_step_all_possible(model)
tab$result[,c("predictors","aic","sbic","rsquare")]
tab$result$aic[which.min(tab$result$aic)]
tab$result$predictors[which.min(tab$result$aic)]
tab$result$predictors[wich.min(tab$result$sbic)]
tab$result$predictors[which.min(tab$result$sbic)]
tab$result$predictors[which.min(tab$result$sbic)]
tab$result$predictors[which.min(tab$result$aic)]
tab$result$predictors[which.min(tab$result$sbic)]
tab$result$predictors[which.max(tab$result$rsquare)]
tab$result$predictors[which.max(tab$result$rsquare)]
tab$result$predictors[which.min(tab$result$rsquare)]
tab$result$predictors[which.max(tab$result$aic)]
tab$result$predictors[which.max(tab$result$sbic)]
x
tab$result$predictors[which.min(tab$result$aic)]
tab$result$predictors[which.min(tab$result$sbic)]
tab$result$predictors[which.max(tab$result$rsquare)]
print(tab$result$predictors[which.min(tab$result$aic)])
print(tab$result$predictors[which.min(tab$result$sbic)])
print(tab$result$predictors[which.max(tab$result$rsquare)])
tab = ols_step_all_possible(model)
results = tab$result[,c("predictors","aic","sbic","rsquare")]
results |>
select(predictors,aic,sbic,rsquare) |>
filter(aic = min(aic))
results |>
select(predictors,aic,sbic,rsquare) |>
filter(aic = min(results$aic))
results |>
select(predictors,aic,sbic,rsquare) |>
filter(aic == min(results$aic))
results |>
select(predictors,aic,sbic,rsquare) |>
filter(aic == min(resultsaic))
results |>
select(predictors,aic,sbic,rsquare) |>
filter(aic == min(aic))
results |>
select(predictors,aic,sbic,rsquare) |>
filter(aic == min(aic) & bic == min(bic) & rsquare == max(rsquare))
results |>
select(predictors,aic,sbic,rsquare) |>
filter(aic == min(aic) & sbic == min(sbic) & rsquare == max(rsquare))
results |>
select(predictors,aic,sbic,rsquare) |>
filter(aic == min(aic) | sbic == min(sbic) | rsquare == max(rsquare))
results
results |>
filter(aic == min(aic) | sbic == min(sbic) | rsquare == max(rsquare))
results |>
filter(aic == min(aic))
print(results |>
filter(aic == min(aic)))
print(results[which.min(results$aic)])
print(results$aic[which.min(results$aic)])
print(results$predictors[which.min(results$aic)])
print(results[which.min(results$aic)])
print(results[,which.min(results$aic)])
print(results[which.min(results$aic),])
print(results[which.min(results$aic),])
print(results[which.min(results$sbic),])
print(results[which.max(results$rsquare),])
print(results[which.min(results$aic),])
print(results[which.min(results$sbic),])
print(results[which.max(results$rsquare),])
print(results[which.min(results$aic),c("predictors","aic")])
print(results$predictors[which.min(results$aic))
print(results$predictors[which.min(results$aic)])
print(results[which.min(results$sbic),])
print(results$predictors[which.min(results$aic)])
print("AIC",results$predictors[which.min(results$aic)])
print("AIC",results$predictors[which.min(results$aic)])
print(results$predictors[which.min(results$aic)],results$aic[which.min(results$aic)])
print(results$predictors[which.min(results$aic)],results$aic[which.min(results$aic)])
print(c(results$predictors[which.min(results$aic)],results$aic[which.min(results$aic)]))
print(c(results$predictors[which.min(results$sbic)],results$aic[which.min(results$sbic)]))
print(c(results$predictors[which.min(results$aic)],results$aic[which.min(results$aic)]))
print(c(results$predictors[which.min(results$sbic)],results$aic[which.min(results$sbic)]))
print(c(results$predictors[which.max(results$rsquare)],results$rsquare[which.max(results$rsquare)]))
print(c(results$predictors[which.min(results$aic)],results$aic[which.min(results$aic)]))
print(c(results$predictors[which.min(results$sbic)],results$sbic[which.min(results$sbic)]))
print(c(results$predictors[which.max(results$rsquare)],results$rsquare[which.max(results$rsquare)]))
for(i in 1:8){
print(i)
}
formula(combinations[1])
combinations = ["MR"]
combinations = c("MR")
formula(combinations[1])
combinations = c("MR + M")
formula(combinations[1])
combinations = c("MR + M")
f = formula(combinations[1])
f = formula("MR + M")
xnam <- paste0("x", 1:25)
xnam
paste(xnam)
paste(xnam)
xnam <- paste("x", 1:25)
xnam <- paste("x", 1:25)
xnam
xnam <- paste0("x", 1:25)
xnam
xnam <- paste("x", 1:25)
xnam
xnam <- paste0("x", 1:25)
xnam
(fmla <- as.formula(paste("y ~ ", paste(xnam, collapse= "+"))))
paste("y ~ ", paste(xnam, collapse= "+")
paste("y ~ ", paste(xnam, collapse= "+"))
paste("y ~ ", paste(xnam, collapse= "+"))
as.formula(paste("y ~ ", paste(xnam, collapse= "+")))
as.formula("x1 + x2")
as.formula(paste("x1 + x2"))
as.formula(paste("x1 + x2"))
as.formula(paste("x1 + x2"))
paste("x1 + x2")
as.formula(paste("x1 + x2"))
paste0("x",1:5)
paste("y ~ ",paste(paste0("x",1:5),collapse = "+"))
as.formula(paste("y ~ ",paste(paste0("x",1:5),collapse = "+")))
combinations = ("1","P","M","MR","P + M","P + MR","M + MR","P + M + MR")
combinations = c("1","P","M","MR","P + M","P + MR","M + MR","P + M + MR")
combinations[i]
for(i in 1:8){
combinations[i]
}
for(i in 1:8){
print(combinations[i])
}
f = as.formula(paste("VR ~ ",paste(combinations[i])))
for(i in 1:8){
print(combinations[i])
f = as.formula(paste("VR ~ ",paste(combinations[i])))
print(f)
}
for(i in 1:8){
f = as.formula(paste("VR ~ ",paste(combinations[i])))
print(f)
}
model = list(0,1,2,3)
model[[1]]
model[1]
model = list()
model[[i]] = lm(f,data = crime_data)
for(i in 1:8){
f = as.formula(paste("VR ~ ",paste(combinations[i])))
model[[i]] = lm(f,data = crime_data)
}
model
summary(model)
print(summary(model[[i]]))
for(i in 1:8){
f = as.formula(paste("VR ~ ",paste(combinations[i])))
model[[i]] = lm(f,data = crime_data)
print(summary(model[[i]]))
}
min = 100000000000
combinations = c(c("1"),c("P","M","MR"),c("P + M","P + MR","M + MR"),c("P + M + MR"))
length(combinations)
combinations
combinations = c(c("1"),c("P","M","MR"),c("P + M","P + MR","M + MR"),c("P + M + MR"))
combinations
combinations = list(("1"),c("P","M","MR"),c("P + M","P + MR","M + MR"),c("P + M + MR"))
combinations
length(combinations)
length(combinations[[1]])
length(combinations[[2]])
combination[[1]][1]
combinations[[1]][1]
combinations[[2]][1]
combinations[[2]][2]
min = 100000000
for(i in 1:length(combinations)){
for(j in 1:length(combinations[[i]]))
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
model = lm(f,data = crime_data)
}
model
summary(model)
