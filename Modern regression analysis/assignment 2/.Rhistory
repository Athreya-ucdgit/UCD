for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(model),
sd = summary(model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
print(bic)
if(bic < min){
min = bic
flag = TRUE
}
}
if(flag == FALSE){
break
}
}
min
for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(model),
sd = summary(model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
print(bic)
if(bic < min){
min = bic
flag = TRUE
}
}
if(flag == FALSE){
break
}
}
for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(model),
sd = summary(model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
print(bic)
if(bic < min){
min = bic
flag = TRUE
}
}
if(flag == FALSE){
break
}
}
min
for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(model),
sd = summary(model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
if(bic < min){
min = bic
flag = TRUE
}
}
if(flag == FALSE){
break
}
}
min
print(c(results$predictors[which.min(results$aic)],results$aic[which.min(results$aic)]))
print(c(results$predictors[which.min(results$sbc)],results$sbc[which.min(results$sbc)]))
print(c(results$predictors[which.max(results$rsquare)],results$rsquare[which.max(results$rsquare)]))
full_model = lm(VR ~ .,data=crime_data)
full_model = lm(VR ~ .,data=crime_data)
B_selection = step(full_model,direction="backward")
null_model = lm(VR ~ 1,data=crime_data)
null_model = lm(VR ~ 1,data=crime_data)
F_selection = step(null_model,direction="forward",scope=list(upper=full_model,lower=~1))
F_selection = step(null_model,direction="forward")
F_selection = step(null_model,direction="forward")
F_selection = step(null_model,direction="forward",scope=list(upper=full_model,lower=~1))
library(tidyverse)
library(dplyr)
library(olsrr)
library(tidyverse)
library(dplyr)
library(olsrr)
crime_data = read_csv("Crimes.csv")
crime_data
crime_data = read_csv("Crimes.csv")
crime_data
crime_data = read_csv("Crimes.csv")
crime_data
crime_data
model = lm(VR ~ ., data = crime_data)
tab = ols_step_all_possible(model)
results = tab$result[,c("predictors","aic","sbc","rsquare")]
results
print(c(results$predictors[which.min(results$aic)],results$aic[which.min(results$aic)]))
print(c(results$predictors[which.min(results$sbc)],results$sbc[which.min(results$sbc)]))
print(c(results$predictors[which.max(results$rsquare)],results$rsquare[which.max(results$rsquare)]))
combinations = list(("1"),c("P","M","MR"),c("P + M","P + MR","M + MR"),c("P + M + MR"))
min = 100000000
for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(model),
sd = summary(model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
if(bic < min){
min = bic
flag = TRUE
}
}
if(flag == FALSE){
break
}
}
min
for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(model),
sd = summary(model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
if(bic < min){
min = bic
flag = TRUE
}
}
print(min)
if(flag == FALSE){
break
}
}
for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(model),
sd = summary(model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
if(bic < min){
min = bic
flag = TRUE
}
}
print(min)
if(flag == FALSE){
break
}
}
print(min)
for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(model),
sd = summary(model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
if(bic < min){
min = bic
flag = TRUE
}
}
print(min)
if(flag == FALSE){
break
}
}
for(i in 1:length(combinations)){
print("Hello")
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(model),
sd = summary(model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
if(bic < min){
min = bic
flag = TRUE
}
}
print(min)
if(flag == FALSE){
break
}
}
combinations = list(("1"),c("P","M","MR"),c("P + M","P + MR","M + MR"),c("P + M + MR"))
min = 100000000
for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(model),
sd = summary(model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
if(bic < min){
min = bic
flag = TRUE
}
}
print(min)
if(flag == FALSE){
break
}
}
plot(tab)
results
print(c(results$predictors[which.min(results$aic)],results$aic[which.min(results$aic)]))
print(c(results$predictors[which.min(results$sbc)],results$sbc[which.min(results$sbc)]))
print(c(results$predictors[which.max(results$rsquare)],results$rsquare[which.max(results$rsquare)]))
print(c(results$predictors[which.min(results$aic)],results$aic[which.min(results$aic)]))
print(c(results$predictors[which.min(results$sbc)],results$sbc[which.min(results$sbc)]))
print(c(results$predictors[which.max(results$rsquare)],results$rsquare[which.max(results$rsquare)]))
model = lm(VR ~ ., data = crime_data)
tab = ols_step_all_possible(model)
results = tab$result[,c("predictors","aic","sbc","rsquare")]
results
print(c(results$predictors[which.min(results$aic)],results$aic[which.min(results$aic)]))
print(c(results$predictors[which.min(results$sbc)],results$sbc[which.min(results$sbc)]))
print(c(results$predictors[which.max(results$rsquare)],results$rsquare[which.max(results$rsquare)]))
F_selection =step(null_model, direction="forward",
scope=list(upper=full_model,lower=~1))
null_model <- lm(VR ~ 1,data=crime_data)
F_selection =step(null_model, direction="forward",
scope=list(upper=full_model,lower=~1))
results["aic"]
results
abalone = read_csv("abalone.csv")
null_model <- lm(shucked_weight ~ 1,data=abalone)
F_selection =step(null_model, direction="forward",
scope=list(upper=full_model,lower=~1))
null_model <- lm(shucked_weight ~ 1,data=abalone)
F_selection =step(null_model, direction="forward",
scope=list(upper=full_model,lower=~1))
null_model <- lm(shucked_weight ~ 1,data=abalone)
F_selection =step(null_model, direction="forward", scope=list(upper=full_model,lower=~1))
full_model <- lm(shucked_weight ~ . ,data=abalone)
B_selection = step(full_model, direction="backward")
null_model <- lm(shucked_weight ~ 1,data=abalone)
F_selection =step(null_model, direction="forward", scope=list(upper=full_model,lower=~1))
print(c(results$predictors[which.min(results$aic)],results$aic[which.min(results$aic)]))
print(c(results$predictors[which.min(results$sbc)],results$sbc[which.min(results$sbc)]))
print(c(results$predictors[which.max(results$rsquare)],results$rsquare[which.max(results$rsquare)]))
for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(model),
sd = summary(model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
if(bic < min){
min = bic
min_combination = combinations[[i]][j]
flag = TRUE
}
}
print(min)
print(min_combination)
if(flag == FALSE){
break
}
}
combinations = list(("1"),c("P","M","MR"),c("P + M","P + MR","M + MR"),c("P + M + MR"))
min = 100000000
min_combination = ""
for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(model),
sd = summary(model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
if(bic < min){
min = bic
min_combination = combinations[[i]][j]
flag = TRUE
}
}
print(min)
print(min_combination)
if(flag == FALSE){
break
}
}
print(c(results$predictors[which.min(results$aic)],results$aic[which.min(results$aic)]))
print(c(results$predictors[which.min(results$sbc)],results$sbc[which.min(results$sbc)]))
print(c(results$predictors[which.max(results$rsquare)],results$rsquare[which.max(results$rsquare)]))
combinations = list(("1"),c("P","M","MR"),c("M + P","MR + P","MR + M"),c("MR + M + P"))
min = 100000000
min_combination = ""
for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(model),
sd = summary(model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
if(bic < min){
min = bic
min_combination = combinations[[i]][j]
flag = TRUE
}
}
print(min)
print(min_combination)
if(flag == FALSE){
break
}
}
min
null_model <- lm(VR ~ 1,data=crime_data)
null_model <- lm(VR ~ 1,data=crime_data)
F_selection =step(null_model, direction="forward",
scope=list(upper=full_model,lower=~1))
F_selection =step(null_model, direction="forward",
scope=list(upper=full_model,lower=~1))
null_model <- lm(VR ~ 1,data=crime_data)
F_selection =step(null_model, direction="forward",
scope=list(upper=full_model,lower=~1))
F_selection =step(null_model, direction="forward",scope=list(upper=full_model,lower=~1))
null_model <- lm(VR ~ 1,data=crime_data)
F_selection =step(null_model, direction="forward",scope=list(upper=full_model,lower=~1))
null_model <- lm(VR ~ 1,data=crime_data)
F_selection =step(null_model, direction="forward",scope=list(upper=full_model,lower=~1))
F_selection =step(null_model, direction="forward",scope=list(upper=full_model,lower=~1))
F_selection =step(null_model, direction="forward",scope=list(upper=full_model,lower=~1))
F_selection =step(null_model, direction="forward",scope=list(upper=full_model,lower=~1))
full_model <- lm(shucked_weight ~ . ,data=abalone)
full_model <- lm(VR ~ . ,data=crime_data)
null_model <- lm(VR ~ 1,data=crime_data)
F_selection =step(null_model, direction="forward",scope=list(upper=full_model,lower=~1))
F_selection =step(null_model, direction="forward",scope=list(upper=full_model,lower=~1),k=log(nrow(crime_data)))
full_model <- lm(VR ~ . ,data=crime_data)
null_model <- lm(VR ~ 1,data=crime_data)
F_selection =step(null_model, direction="forward",scope=list(upper=full_model,lower=~1),k=log(nrow(crime_data)))
F_selection =step(null_model, direction="forward",scope=list(upper=full_model,lower=~1))
F_selection =step(null_model, direction="forward",scope=list(upper=full_model,lower=~1),k=log(nrow(crime_data)))
summary(F_selection)
combinations = list(("1"),c("P","M","MR"),c("M + P","MR + P","MR + M"),c("MR + M + P"))
min = 100000000
min_combination = ""
for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(model),
sd = summary(model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
if(bic < min){
min = bic
min_combination = combinations[[i]][j]
flag = TRUE
}
}
if(flag == FALSE){
break
}
}
min
print(min)
print(min_combination)
combinations = list(("1"),c("P","M","MR"),c("M + P","MR + P","MR + M"),c("MR + M + P"))
min = 100000000
min_combination = ""
for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(model),
sd = summary(model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
if(bic < min){
min = bic
min_combination = combinations[[i]][j]
flag = TRUE
}
}
if(flag == FALSE){
break
}
}
print(min)
print(min_combination)
football = read_csv("football.csv")
football
crime_model = lm(VR ~ ., data = crime_data)
tab = ols_step_all_possible(crime_model)
results = tab$result[,c("predictors","aic","sbc","rsquare")]
results
print(c(results$predictors[which.min(results$aic)],results$aic[which.min(results$aic)]))
print(c(results$predictors[which.min(results$sbc)],results$sbc[which.min(results$sbc)]))
print(c(results$predictors[which.max(results$rsquare)],results$rsquare[which.max(results$rsquare)]))
combinations = list(("1"),c("P","M","MR"),c("M + P","MR + P","MR + M"),c("MR + M + P"))
min = 100000000
min_combination = ""
for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
crime_model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(crime_model),
sd = summary(crime_model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
if(bic < min){
min = bic
min_combination = combinations[[i]][j]
flag = TRUE
}
}
if(flag == FALSE){
break
}
}
print(min)
print(min_combination)
football_model = lm(y ~ x2 + x7 + x8,data=football)
football_model = lm(y ~ x2 + x7 + x8,data=football)
summary(football_model)
y_bar = mean(football["y"])
y_bar = mean(football["y"],na.rm = TRUE)
y_bar = mean(football["y"],na.rm = TRUE)
football["y"]
mean(football["y"])
football["y"]
sum(y_bar)
y_bar = mean(football["y"],na.rm = TRUE)
y_bar = mean(football["y"],na.rm = TRUE)
y_bar = mean(football["y"],na.rm = TRUE)
y_bar = mean(football["y"])
sum(y_bar)
sum(y_bar)
y_bar = football["y"]
sum(y_bar)
sum(y_bar)/nrow(y_bar)
y_bar = mean(football["y"])
y_bar = mean(football$y)
y_bar
sst = (football$y - y_bar)^2
sst
sst = sum((football$y - y_bar)^2)
sst
sse = sum((football$y - fitted.values(football_model))^2)
sse
ssr = sum((fitted.values(model) - y_bar)^2)
ssr
ssr = sum((fitted.values(model) - y_bar)^2)
ssr
ssr = fitted.values(model) - y_bar
ssr
ssr = fitted.values(football_model) - y_bar
ssr
ssr = sum((fitted.values(football_model) - y_bar)^2)
ssr
ssr + sse
sst
cat("sst = ",sst," , ","sse = ",sse," , ","ssr = ",ssr)
sse + ssr
cat("DF of sse = ", df_see," , ","DF of ssr = ", df_ssr," , ","DF of sst = ",df_sst)
cat("DF of sse = ",df_sse," , ","DF of ssr = ", df_ssr," , ","DF of sst = ",df_sst)
p = 3
n = nrow(football)
df_sse = n - p - 1
df_ssr = n - 1
df_sst = df_sse + df_ssr
cat("DF of sse = ",df_sse," , ","DF of ssr = ", df_ssr," , ","DF of sst = ",df_sst)
p = 3
n = nrow(football)
df_sse = n - p - 1
df_ssr = p
df_sst = df_sse + df_ssr
cat("DF of sse = ",df_sse," , ","DF of ssr = ", df_ssr," , ","DF of sst = ",df_sst)
mst = sst / df_sst
mse = sse / df_sse
msr = ssr / df_ssr
cat("MSE = ",mse," , ","MSR = ",msr," , ","MST = ",mst)
cat("sse = ",sse," , ","ssr = ",ssr," , ","sst = ",sst)
y_bar = mean(football$y)
sst = sum((football$y - y_bar)^2)
sse = sum((football$y - fitted.values(football_model))^2)
ssr = sum((fitted.values(football_model) - y_bar)^2)
cat("sse = ",sse," , ","ssr = ",ssr," , ","sst = ",sst)
sse + ssr
p = 3
n = nrow(football)
df_sse = n - p - 1
df_ssr = p
df_sst = df_sse + df_ssr
cat("DF of sse = ",df_sse," , ","DF of ssr = ",df_ssr," , ","DF of sst = ",df_sst)
mst = sst / df_sst
mse = sse / df_sse
msr = ssr / df_ssr
cat("MSE = ",mse," , ","MSR = ",msr," , ","MST = ",mst)
