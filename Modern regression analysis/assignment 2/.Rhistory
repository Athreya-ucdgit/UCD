full_model <- lm(VR ~ . ,data=crime_data)
null_model <- lm(VR ~ 1,data=crime_data)
F_selection =step(null_model, direction="forward",scope=list(upper=full_model,lower=~1))
F_selection =step(null_model, direction="forward",scope=list(upper=full_model,lower=~1),k=log(nrow(crime_data)))
full_model <- lm(VR ~ . ,data=crime_data)
null_model <- lm(VR ~ 1,data=crime_data)
F_selection =step(null_model, direction="forward",scope=list(upper=full_model,lower=~1),k=log(nrow(crime_data)))
F_selection =step(null_model, direction="forward",scope=list(upper=full_model,lower=~1))
F_selection =step(null_model, direction="forward",scope=list(upper=full_model,lower=~1),k=log(nrow(crime_data)))
summary(F_selection)
combinations = list(("1"),c("P","M","MR"),c("M + P","MR + P","MR + M"),c("MR + M + P"))
min = 100000000
min_combination = ""
for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(model),
sd = summary(model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
if(bic < min){
min = bic
min_combination = combinations[[i]][j]
flag = TRUE
}
}
if(flag == FALSE){
break
}
}
min
print(min)
print(min_combination)
combinations = list(("1"),c("P","M","MR"),c("M + P","MR + P","MR + M"),c("MR + M + P"))
min = 100000000
min_combination = ""
for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(model),
sd = summary(model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
if(bic < min){
min = bic
min_combination = combinations[[i]][j]
flag = TRUE
}
}
if(flag == FALSE){
break
}
}
print(min)
print(min_combination)
football = read_csv("football.csv")
football
crime_model = lm(VR ~ ., data = crime_data)
tab = ols_step_all_possible(crime_model)
results = tab$result[,c("predictors","aic","sbc","rsquare")]
results
print(c(results$predictors[which.min(results$aic)],results$aic[which.min(results$aic)]))
print(c(results$predictors[which.min(results$sbc)],results$sbc[which.min(results$sbc)]))
print(c(results$predictors[which.max(results$rsquare)],results$rsquare[which.max(results$rsquare)]))
combinations = list(("1"),c("P","M","MR"),c("M + P","MR + P","MR + M"),c("MR + M + P"))
min = 100000000
min_combination = ""
for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
crime_model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(crime_model),
sd = summary(crime_model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
if(bic < min){
min = bic
min_combination = combinations[[i]][j]
flag = TRUE
}
}
if(flag == FALSE){
break
}
}
print(min)
print(min_combination)
football_model = lm(y ~ x2 + x7 + x8,data=football)
football_model = lm(y ~ x2 + x7 + x8,data=football)
summary(football_model)
y_bar = mean(football["y"])
y_bar = mean(football["y"],na.rm = TRUE)
y_bar = mean(football["y"],na.rm = TRUE)
football["y"]
mean(football["y"])
football["y"]
sum(y_bar)
y_bar = mean(football["y"],na.rm = TRUE)
y_bar = mean(football["y"],na.rm = TRUE)
y_bar = mean(football["y"],na.rm = TRUE)
y_bar = mean(football["y"])
sum(y_bar)
sum(y_bar)
y_bar = football["y"]
sum(y_bar)
sum(y_bar)/nrow(y_bar)
y_bar = mean(football["y"])
y_bar = mean(football$y)
y_bar
sst = (football$y - y_bar)^2
sst
sst = sum((football$y - y_bar)^2)
sst
sse = sum((football$y - fitted.values(football_model))^2)
sse
ssr = sum((fitted.values(model) - y_bar)^2)
ssr
ssr = sum((fitted.values(model) - y_bar)^2)
ssr
ssr = fitted.values(model) - y_bar
ssr
ssr = fitted.values(football_model) - y_bar
ssr
ssr = sum((fitted.values(football_model) - y_bar)^2)
ssr
ssr + sse
sst
cat("sst = ",sst," , ","sse = ",sse," , ","ssr = ",ssr)
sse + ssr
cat("DF of sse = ", df_see," , ","DF of ssr = ", df_ssr," , ","DF of sst = ",df_sst)
cat("DF of sse = ",df_sse," , ","DF of ssr = ", df_ssr," , ","DF of sst = ",df_sst)
p = 3
n = nrow(football)
df_sse = n - p - 1
df_ssr = n - 1
df_sst = df_sse + df_ssr
cat("DF of sse = ",df_sse," , ","DF of ssr = ", df_ssr," , ","DF of sst = ",df_sst)
p = 3
n = nrow(football)
df_sse = n - p - 1
df_ssr = p
df_sst = df_sse + df_ssr
cat("DF of sse = ",df_sse," , ","DF of ssr = ", df_ssr," , ","DF of sst = ",df_sst)
mst = sst / df_sst
mse = sse / df_sse
msr = ssr / df_ssr
cat("MSE = ",mse," , ","MSR = ",msr," , ","MST = ",mst)
cat("sse = ",sse," , ","ssr = ",ssr," , ","sst = ",sst)
y_bar = mean(football$y)
sst = sum((football$y - y_bar)^2)
sse = sum((football$y - fitted.values(football_model))^2)
ssr = sum((fitted.values(football_model) - y_bar)^2)
cat("sse = ",sse," , ","ssr = ",ssr," , ","sst = ",sst)
sse + ssr
p = 3
n = nrow(football)
df_sse = n - p - 1
df_ssr = p
df_sst = df_sse + df_ssr
cat("DF of sse = ",df_sse," , ","DF of ssr = ",df_ssr," , ","DF of sst = ",df_sst)
mst = sst / df_sst
mse = sse / df_sse
msr = ssr / df_ssr
cat("MSE = ",mse," , ","MSR = ",msr," , ","MST = ",mst)
library(tidyverse)
library(dplyr)
library(olsrr)
crime_data = read_csv("Crimes.csv")
crime_data
crime_data
crime_model = lm(VR ~ ., data = crime_data)
tab = ols_step_all_possible(crime_model)
results = tab$result[,c("predictors","aic","sbc","rsquare")]
results
print(c(results$predictors[which.min(results$aic)],results$aic[which.min(results$aic)]))
print(c(results$predictors[which.min(results$sbc)],results$sbc[which.min(results$sbc)]))
print(c(results$predictors[which.max(results$rsquare)],results$rsquare[which.max(results$rsquare)]))
combinations = list(("1"),c("P","M","MR"),c("M + P","MR + P","MR + M"),c("MR + M + P"))
min = 100000000
min_combination = ""
for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
crime_model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(crime_model),
sd = summary(crime_model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
if(bic < min){
min = bic
min_combination = combinations[[i]][j]
flag = TRUE
}
}
if(flag == FALSE){
break
}
}
print(min)
print(min_combination)
library(tidyverse)
library(dplyr)
library(olsrr)
r2 = 1 - (sse/sst)
r2
summary(football_model)
r2_adj = 1 - ((sse/nrow(football) - 3 - 1)/(sst/(nrow(football)-1)))
r2_adj
nrow(football) - 1
nrow(football) - 3 - 1
nrow(football) - 1
nrow(football) - 3 - 1
r2_adj = 1 - ((sse/(nrow(football) - 3 - 1))/(sst/(nrow(football)-1)))
r2_afj
r2_adj
print(c(r2,r2_adj))
model.matrix(model)
sigma_2 = sse / (nrow(football) - 3 - 1)
sigma_@
```
sigma_2
sigma = sigma_2 * solve(t(model.matrix(model))%*%model.matrix(model)))
sigma = sigma_2 * solve(t(model.matrix(model))%*%model.matrix(model))
sigma
library(tidyverse)
library(dplyr)
library(olsrr)
crime_data = read_csv("Crimes.csv")
crime_data
crime_model = lm(VR ~ ., data = crime_data)
tab = ols_step_all_possible(crime_model)
results = tab$result[,c("predictors","aic","sbc","rsquare")]
results
print(c(results$predictors[which.min(results$aic)],results$aic[which.min(results$aic)]))
print(c(results$predictors[which.min(results$sbc)],results$sbc[which.min(results$sbc)]))
print(c(results$predictors[which.max(results$rsquare)],results$rsquare[which.max(results$rsquare)]))
combinations = list(("1"),c("P","M","MR"),c("M + P","MR + P","MR + M"),c("MR + M + P"))
min = 100000000
min_combination = ""
for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
crime_model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(crime_model),
sd = summary(crime_model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
if(bic < min){
min = bic
min_combination = combinations[[i]][j]
flag = TRUE
}
}
if(flag == FALSE){
break
}
}
print(min)
print(min_combination)
football = read_csv("football.csv")
football
football_model = lm(y ~ x2 + x7 + x8,data=football)
summary(football_model)
y_bar = mean(football$y)
sst = sum((football$y - y_bar)^2)
sse = sum((football$y - fitted.values(football_model))^2)
ssr = sum((fitted.values(football_model) - y_bar)^2)
cat("sse = ",sse," , ","ssr = ",ssr," , ","sst = ",sst)
sse + ssr
p = 3
n = nrow(football)
df_sse = n - p - 1
df_ssr = p
df_sst = df_sse + df_ssr
cat("DF of sse = ",df_sse," , ","DF of ssr = ",df_ssr," , ","DF of sst = ",df_sst)
mst = sst / df_sst
mse = sse / df_sse
msr = ssr / df_ssr
cat("MSE = ",mse," , ","MSR = ",msr," , ","MST = ",mst)
r2 = 1 - (sse/sst)
r2_adj = 1 - ((sse/(nrow(football) - 3 - 1))/(sst/(nrow(football)-1)))
print(c(r2,r2_adj))
sigma_2 = sse / (nrow(football) - 3 - 1)
sigma = sigma_2 * solve(t(model.matrix(model))%*%model.matrix(model))
sigma
?qt
t_b1 = coef(football_model)[1] /(summary(model)$sigma)
t_b1
t_b1 = coef(football_model)[2] /(summary(model)$sigma)
t_b1
summary(model)
summary(model)$sigma
r = summary(model)
r$cov.unscaled
r2_adj = 1 - ((sse/n - p - 1))/(sst/n-1)))
r2_adj = 1 - ((sse/n - p - 1))/(sst/n-1))
r2_adj = 1 - (mse/mst)
print(c(r2,r2_adj))
sigma_2 = sse / (n - p - 1)
sigma = sigma_2 * solve(t(model.matrix(model))%*%model.matrix(model))
sigma
coef(football_model)[2]
sigma = sigma_2 * solve(t(model.matrix(football_model))%*%model.matrix(football_model))
sigma
sigma[1]
sigma[2]
sigma[3]
sigma[4]
sigma[5]
sigma[2][2]
coef(football_model)[2] / sqrt(sigma[6])
sigma
sqrt(sigma)
summary = summary(football_model)
summary$cov.unscaled
sigma
vcov(model)
vcov(football_model)
t_b1 = coef(football_model) / sigma(6)
t_b1 = coef(football_model) / sigma[6]
t_b1
t_b1 = coef(football_model) / sqrt(sigma[6])
t_b1
t_b1 = coef(football_model)[2] / sqrt(sigma[6])
t_b1
t_b2 = coef(football_model)[3] / sqrt(sigma[10])
t_b2
sigma
coef(football_model)[3]
sqrt(sigma[10])
sigma
sigma[10]
sigma
t_b2 = coef(football_model)[3] / sqrt(sigma[1])
t_b2
sqrt(sigma[11])
sqrt(sigma[6])
coef(football_model)[2]
t_b2 = coef(football_model)[3] / sqrt(sigma[11])
t_b2
t_b3 = coef(football_model)[4] / sqrt(sigma[16])
t_b3
print(c(r2 = r2,r2_adj = r2_adj))
print(C(T_B1 = t_b1, T_B2 = t_b2, T_b3 = t_b3))
print(c(T_B1 = t_b1, T_B2 = t_b2, T_b3 = t_b3))
print(c(T_B1 = t_b1, T_B2 = t_b2, T_B3 = t_b3))
print(c(T_B1 = t_b1, T_B2 = t_b2, T_B3 = t_b3))
print(c(T_B1 = t_b1, T_B2 = t_b2, T_B3 = t_b3))
print(c(T_B1 = t_b1, T_B2 = t_b2, T_B3 = t_b3))
print(c("T_B1" = t_b1, "T_B2" = t_b2, "T_B3" = t_b3))
print(c("T_" = t_b1, "T_" = t_b2, "T_" = t_b3))
t_b1
print(c("T_" = t_b1$x1, "T_" = t_b2, "T_" = t_b3))
print(c("T_" = t_b1[1], "T_" = t_b2, "T_" = t_b3))
print(c("T_" = t_b1, "T_" = t_b2, "T_" = t_b3))
X = model.matrix(football_model)
sigma = sigma_2 * solve(t(X)%*%X)
sigma
t_b1 = coef(football_model)[2] / sqrt(sigma[6])
t_b2 = coef(football_model)[3] / sqrt(sigma[11])
t_b3 = coef(football_model)[4] / sqrt(sigma[16])
print(c("T_" = t_b1, "T_" = t_b2, "T_" = t_b3))
beta = solve(t(X)%*%X)%*%t(X)%*%X
beta
beta = solve(t(X)%*%X)%*%t(X)%*%football$y
beta
beta["x2"]
beta$x2
beta
beta[1]
beta[1,1]
beta
t_b1 = coef(football_model)[2] / sqrt(sigma[2,2])
t_b1 = coef(football_model)[2] / sqrt(sigma[2,2])
t_b1 = coef(football_model)[2,2] / sqrt(sigma[2,2])
t_b1 = beta[2,2] / sqrt(sigma[2,2])
t_b2 = beta[2,3] / sqrt(sigma[11])
beta
beta[2][2]
beta[2]
beta[2,2]
beta[2,1]
beta
beta[2,1]
t_b1 = beta[2,1] / sqrt(sigma[2,2])
t_b2 = beta[3,1] / sqrt(sigma[11])
t_b3 = beta[4,1] / sqrt(sigma[16])
print(c("T_" = t_b1, "T_" = t_b2, "T_" = t_b3))
print(c("T_" = t_b1, "T_" = t_b2, "T_" = t_b3))
qt(0.05,n - p - 1)
f_stat = msr/mse
f_stat
qf(0.95,p,n-p-1)
f_stat = msr/mse
qf(0.95,p,n-p-1)
f_Stat
f_stat = msr/mse
f_Stat
f_stat
c(f_stat,qf(0.95,p,n-p-1))
c(f_stat = f_stat,"95% CI F distribution" = qf(0.95,p,n-p-1))
X_Star = matrix(c(1,2300,56,2100),ncol=1)
X_Star = matrix(c(1,2300,56,2100),ncol=1)
X_star
X_Star = matrix(c(1,2300,56,2100),ncol=1)
X_star
X_Star = matrix(c(1,2300,56,2100),ncol=1)
X_star
X_Star = matrix(c(1,2300,56,2100),ncol=1)
X_Star
library(tidyverse)
library(dplyr)
library(olsrr)
crime_data = read_csv("Crimes.csv")
crime_data
crime_model = lm(VR ~ ., data = crime_data)
tab = ols_step_all_possible(crime_model)
results = tab$result[,c("predictors","aic","sbc","rsquare")]
results
print(c(results$predictors[which.min(results$aic)],results$aic[which.min(results$aic)]))
print(c(results$predictors[which.min(results$sbc)],results$sbc[which.min(results$sbc)]))
print(c(results$predictors[which.max(results$rsquare)],results$rsquare[which.max(results$rsquare)]))
combinations = list(("1"),c("P","M","MR"),c("M + P","MR + P","MR + M"),c("MR + M + P"))
min = 100000000
min_combination = ""
for(i in 1:length(combinations)){
flag = FALSE
for(j in 1:length(combinations[[i]])){
f = as.formula(paste("VR ~ ",paste(combinations[[i]][j])))
crime_model = lm(f,data = crime_data)
lm = sum(log(dnorm(crime_data$VR,fitted.values(crime_model),
sd = summary(crime_model)$sigma)))
bic = -2 * lm + (i+1) * log(nrow(crime_data))
if(bic < min){
min = bic
min_combination = combinations[[i]][j]
flag = TRUE
}
}
if(flag == FALSE){
break
}
}
print(min)
print(min_combination)
football = read_csv("football.csv")
football
football_model = lm(y ~ x2 + x7 + x8,data=football)
summary(football_model)
y_bar = mean(football$y)
sst = sum((football$y - y_bar)^2)
sse = sum((football$y - fitted.values(football_model))^2)
ssr = sum((fitted.values(football_model) - y_bar)^2)
cat("sse = ",sse," , ","ssr = ",ssr," , ","sst = ",sst)
sse + ssr
p = 3
n = nrow(football)
df_sse = n - p - 1
df_ssr = p
df_sst = df_sse + df_ssr
X = model.matrix(football_model)
cat("DF of sse = ",df_sse," , ","DF of ssr = ",df_ssr," , ","DF of sst = ",df_sst)
mst = sst / df_sst
mse = sse / df_sse
msr = ssr / df_ssr
cat("MSE = ",mse," , ","MSR = ",msr," , ","MST = ",mst)
beta = solve(t(X)%*%X)%*%t(X)%*%football$y
sigma_2 = sse / (n - p - 1)
sigma = sigma_2 * solve(t(X)%*%X)
sigma
t_b1 = beta[2,1] / sqrt(sigma[2,2])
t_b2 = beta[3,1] / sqrt(sigma[11])
t_b3 = beta[4,1] / sqrt(sigma[16])
print(c("T_" = t_b1, "T_" = t_b2, "T_" = t_b3))
r2 = 1 - (sse/sst)
r2_adj = 1 - (mse/mst)
print(c(r2 = r2,r2_adj = r2_adj))
f_stat = msr/mse
c(f_stat = f_stat,"95% CI F distribution" = qf(0.95,p,n-p-1))
X_Star = matrix(c(1,2300,56,2100),ncol=1)
X_Star
Y_star_mean_upper =
beta
Y_star_mean_upper =
beta
Y_star_mean_upper =
beta
Y_star_mean_upper
beta
matrix(beta,ncol=1)
Y_Star_mean = X_Star%*%matrix(beta,ncol=1)
Y_Star_mean = X_Star%*%matrix(beta,ncol=1)
Y_Star_mean = X_Star%*%matrix(beta,ncol=1)
matrix(beta,ncol=1)
Y_Star_mean = X_Star%*%beta_matrix
beta_matrix = matrix(beta,ncol=1)
Y_Star_mean = X_Star%*%beta_matrix
Y_Star_mean = t(X_Star)%*%beta_matrix
Y_Star_mean
Y_Star_mean = t(X_Star)%*%matrix(beta,ncol=1)
Y_Star_mean
Y_Star_mean_upper = Y_Star_mean + qt(0.05,n-p-1)sqrt(sigma_2 * t(X_star)%*%solve(t(X)%*%(X))%*%X_star)
Y_Star_mean_upper = Y_Star_mean + qt(0.05,n-p-1)sqrt(sigma_2 * t(X_star)%*%solve(t(X)%*%(X))%*%X_star)
Y_Star_mean_upper = Y_Star_mean + qt(0.05,n-p-1) * sqrt(sigma_2 * t(X_star)%*%solve(t(X)%*%(X))%*%X_star)
Y_Star_mean_upper = Y_Star_mean + qt(0.05,n-p-1) * sqrt(sigma_2 * t(X_star)%*%solve(t(X)%*%(X))%*%X_star)
Y_Star_mean_upper = Y_Star_mean + qt(0.05,n-p-1) * sqrt(sigma_2 * t(X_star)%*%solve(t(X)%*%(X))%*%X_Star)
Y_Star_mean_upper = Y_Star_mean + qt(0.05,n-p-1) * sqrt(sigma_2 * t(X_Star)%*%solve(t(X)%*%(X))%*%X_Star)
Y_star_mean_upper
Y_Star_mean_upper
Y_Star_mean
